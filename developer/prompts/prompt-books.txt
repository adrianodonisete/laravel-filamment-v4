

Use syntax for laravel 12 and php 8.4.
Don't need to create unit tests.

Create a Laravel model named `Book` (app/Models/Store/Book.php) with soft deletes.
"Store" is just for organizing files, this folder will contain all models related to the store. 
1. Generate the model with a migration file.
2. Add the following fields:
   - id (int)
   - name (string)
   - author (string)
   - pages (int)
   - price (decimal:10,2)
   - description (text)
   - status (int)
3. Enable timestamps and soft deletes.
4. Add the casts for the fields date and numeric (Casts can and likely should be set in a casts() method).
5. Add the getter for the field name and author capitalized every words 
    5.1 Example: "the great gatsby" => "The Great Gatsby"
    5.2 Example: protected function name(): Attribute
    {
        return Attribute::make(
            get: fn (string $value) => Str::title($value)
        );
    }
6. Create an enum `BookStatusEnum` (app/Enums/Store/BookStatusEnum.php) for the field status
    with the values: ACTIVE: string = 'Active', OUT_OF_STOCK: string = 'Out of Stock', INACTIVE: string = 'Inactive'.


Enable soft deletes for the `Book` model. 
1. Add `use SoftDeletes;` to the model.
2. Add `softDeletes()` in the migration.
3. Use `onlyTrashed()` and `withTrashed()` when querying.
 
Best Practice: Always check if soft deletes make sense for your data before using.


Create a RESTful CRUD controller named `BookController` (app/Http/Controllers/Api/Store/BookController.php). 
This controller is specific for API, which is why it is in the "Api" namespace.
1. Add REST methods: index, show, store, update, destroy.
    1.1 in the method "destroy" soft deletes.
2. Use the `Book` model where necessary.
3. All responses must be in JSON format (ex: use JsonResource).
4. Authentication with Laravel Sanctum (https://laravel.com/docs/12.x/sanctum).
    4.1 Todos os endpoints precisam de autenticação
    4.2 Use `auth:sanctum` middleware in the routes.
    4.3 Generate tokens for API.
5. Create a route file (routes/api/store/book_routes.php) for the book routes and add in routes/api.php.
6. HTTP status codes expected (200, 201, 404, 422, 400 and 500)


Create a `BookResource` (app/Http/Resources/Api/Store/BookResource.php) for formatting API responses.
1. Include fields: id, name, author, pages, price, description, status (BookStatusEnum).
2. Return this resource from controller API methods.


Create form requests for store and update, `StoreBookRequest` (app/Http/Requests/Store/StoreBookRequest.php) and `UpdateBookRequest` (app/Http/Requests/Store/UpdateBookRequest.php).
1. Add the validation rules for the fields based on the model Book.
2. For the field status, validate with BookStatusEnum (ex: Rule::enum(BookStatusEnum::class)).
3. Add the messages for the validation rules in pt-BR.


Add search to the `index` method of `BookController`.
1. Add filter with query parameter by field name.
2. For string fields, use `where('field', 'like', "%$field%")`.
3. For numeric fields and enum fields, use `where('field', '=', $field)`.
4. Paginate results with 15 items per page, return information about pagination (meta/links Laravel default format).
5. In results use BookResource::collection($books)->additional() to add extra information.


Seeders and Factories
1. Create a factory for the Book model (database/factories/BookFactory.php).
2. Create a seeder to populate the books table with 50 records (database/seeders/BookSeeder.php).
3. Use the BookFactory in the BookSeeder to generate the records.
4. Use faker to create realistic data.
    4.1. Define fake data for
    - name: $this->faker->sentence(3)
    - author: $this->faker->name()
    - pages: $this->faker->numberBetween(200, 1000)
    - price: $this->faker->randomFloat(2, 10, 100)
    - description: $this->faker->paragraph()
    - status: $this->faker->randomElement(BookStatusEnum::cases())


Create unit testes with Pest (tests/Feature/Store/BookTest.php) for the Book API endpoints.
1. Check if Pest is correctly installed and configured.
2. Write tests for all CRUD operations.
